# Note: You must restart bin/webpack-dev-server for changes to take effect

default: &default
  source_path: app/javascript
  source_entry_path: packs
  public_root_path: public
  public_output_path: packs
  cache_path: tmp/cache/webpacker
  check_yarn_integrity: false
  webpack_compile_output: true

  # Additional paths webpack should lookup modules
  # ['app/assets', 'engine/foo/app/assets']
  resolved_paths: []

  # Reload manifest.json on all requests so we reload latest compiled packs
  cache_manifest: false

  # Extract and emit a css file
  # extract_css: false
  # By default Webpacker only generates Javascript files, but we need to add CSS support as well, and if the 'extract_css' property is set to true, and if a ESM module has CSS markup imported in it, then, we can give the bundle built from the ESM module as an argument to 'stylesheet_pack_tag' helper method.
  # The 'extract_css' property will extract CSS markup of a ESM module into a same file name as the final module, but stores it with the .css file extension in the 'css' folder of 'public_root_path' property, and this relative path of .css file can be given as argument to 'stylesheet_pack_tag' helper method, and then this method will serve the .css file to the browser.
  # A stylesheet can be imported into a .js file, and this is hanlded by Rails by default by loaders configured by webpacker gem, in that case, if 'extract_css' is set to false, which is the default value for 'development' environment, you just give the bundle as argument to only 'javascript_pack_tag', and this file will only have the markup that is the dependency of this module, and the CSS markup of a bundle is added to the web page by Javascript such that the CSS markup is added to style element in the head element of the web page in which the bundle is referenced, but, if you set 'extract_css' to true, the .css is extracted to another .css file with the same name, but with .css file extension, in the 'css' folder of 'public_root_path' property of webpacker.yml file, and in that case, you can give the same bundle name as the argument to both 'javascript_pack_tag' and 'stylesheet_pack_tag' helper methods, which will load the .js and .css extracted from the bundle.
  extract_css: true

  static_assets_extensions:
    - .jpg
    - .jpeg
    - .png
    - .gif
    - .tiff
    - .ico
    - .svg
    - .eot
    - .otf
    - .ttf
    - .woff
    - .woff2

  extensions:
    - .svelte
    - .mjs
    - .js
    - .sass
    - .scss
    - .css
    - .module.sass
    - .module.scss
    - .module.css
    - .png
    - .svg
    - .gif
    - .jpeg
    - .jpg

development:
  <<: *default
  compile: true

  # Verifies that correct packages and versions are installed by inspecting package.json, yarn.lock, and node_modules
  check_yarn_integrity: true

  # Reference: https://webpack.js.org/configuration/dev-server/
  dev_server:
    https: false
    host: localhost
    port: 3035
    public: localhost:3035
    hmr: false
    # Inline should be set to true if using HMR
    inline: true
    overlay: true
    compress: true
    disable_host_check: true
    use_local_ip: false
    quiet: false
    pretty: false
    headers:
      'Access-Control-Allow-Origin': '*'
    watch_options:
      ignored: '**/node_modules/**'


test:
  <<: *default
  compile: true

  # Compile test packs to a separate directory
  public_output_path: packs-test

production:
  <<: *default

  # Production depends on precompilation of packs prior to booting for performance.
  compile: false

  # Extract and emit a css file
  extract_css: true

  # Cache manifest.json for performance
  cache_manifest: true
